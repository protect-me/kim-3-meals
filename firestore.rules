rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function approveLevel(level) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level <= level;
    }
    function updateLikeCount(before, after) {
      return before.address == after.address &&
        before.category == after.category &&
        before.comment == after.comment &&
        before.createdAt == after.createdAt &&
        before.id == after.id &&
        before.name == after.name &&
        before.uid == after.uid &&
        before.userName == after.userName &&
        before.likeCount != after.likeCount &&
        before.likeUserList != after.likeUserList    
    }

    match /users/{userId} {
      allow read: if approveLevel(0) 
        || (request.auth != null && request.auth.uid == userId);
      allow update: if approveLevel(0)
        || (request.auth != null && request.auth.uid == userId && resource.data.level == request.resource.data.level);
      allow create, delete: if false; // functions
    }
    match /store/{storeId} {
      allow read: if true;
      allow create: if approveLevel(0);
      allow update, delete: if approveLevel(0) 
        || resource.data.uid == request.auth.uid;
    }
    match /requests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if approveLevel(0)
        || (request.auth != null && resource.data.uid == request.auth.uid)
        || updateLikeCount(resource.data, request.resource.data)
      allow delete: if approveLevel(0) 
        || (request.auth != null && resource.data.uid == request.auth.uid)
    }
    match /{document=**} {
      allow read, update: if true;
      allow create, delete: if false;
    }
  }
}